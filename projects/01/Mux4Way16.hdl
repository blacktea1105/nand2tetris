// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=muxab);
    Mux16(a=c, b=d, sel=sel[0], out=muxcd);
    Mux16(a=muxab, b=muxcd, sel=sel[1], out=out);

    /*
    Mux(a=a[0], b=b[0], sel=sel[0], out=muxab0);
    Mux(a=c[0], b=d[0], sel=sel[0], out=muxcd0);
    Mux(a=muxab0, b=muxcd0, sel=sel[1], out=out[0]);
    Mux(a=a[1], b=b[1], sel=sel[0], out=muxab1);
    Mux(a=c[1], b=d[1], sel=sel[0], out=muxcd1);
    Mux(a=muxab1, b=muxcd1, sel=sel[1], out=out[1]);
    Mux(a=a[2], b=b[2], sel=sel[0], out=muxab2);
    Mux(a=c[2], b=d[2], sel=sel[0], out=muxcd2);
    Mux(a=muxab2, b=muxcd2, sel=sel[1], out=out[2]);
    Mux(a=a[3], b=b[3], sel=sel[0], out=muxab3);
    Mux(a=c[3], b=d[3], sel=sel[0], out=muxcd3);
    Mux(a=muxab3, b=muxcd3, sel=sel[1], out=out[3]);
    Mux(a=a[4], b=b[4], sel=sel[0], out=muxab4);
    Mux(a=c[4], b=d[4], sel=sel[0], out=muxcd4);
    Mux(a=muxab4, b=muxcd4, sel=sel[1], out=out[4]);
    Mux(a=a[5], b=b[5], sel=sel[0], out=muxab5);
    Mux(a=c[5], b=d[5], sel=sel[0], out=muxcd5);
    Mux(a=muxab5, b=muxcd5, sel=sel[1], out=out[5]);
    Mux(a=a[6], b=b[6], sel=sel[0], out=muxab6);
    Mux(a=c[6], b=d[6], sel=sel[0], out=muxcd6);
    Mux(a=muxab6, b=muxcd6, sel=sel[1], out=out[6]);
    Mux(a=a[7], b=b[7], sel=sel[0], out=muxab7);
    Mux(a=c[7], b=d[7], sel=sel[0], out=muxcd7);
    Mux(a=muxab7, b=muxcd7, sel=sel[1], out=out[7]);
    Mux(a=a[8], b=b[8], sel=sel[0], out=muxab8);
    Mux(a=c[8], b=d[8], sel=sel[0], out=muxcd8);
    Mux(a=muxab8, b=muxcd8, sel=sel[1], out=out[8]);
    Mux(a=a[9], b=b[9], sel=sel[0], out=muxab9);
    Mux(a=c[9], b=d[9], sel=sel[0], out=muxcd9);
    Mux(a=muxab9, b=muxcd9, sel=sel[1], out=out[9]);
    Mux(a=a[10], b=b[10], sel=sel[0], out=muxab10);
    Mux(a=c[10], b=d[10], sel=sel[0], out=muxcd10);
    Mux(a=muxab10, b=muxcd10, sel=sel[1], out=out[10]);
    Mux(a=a[11], b=b[11], sel=sel[0], out=muxab11);
    Mux(a=c[11], b=d[11], sel=sel[0], out=muxcd11);
    Mux(a=muxab11, b=muxcd11, sel=sel[1], out=out[11]);
    Mux(a=a[12], b=b[12], sel=sel[0], out=muxab12);
    Mux(a=c[12], b=d[12], sel=sel[0], out=muxcd12);
    Mux(a=muxab12, b=muxcd12, sel=sel[1], out=out[12]);
    Mux(a=a[13], b=b[13], sel=sel[0], out=muxab13);
    Mux(a=c[13], b=d[13], sel=sel[0], out=muxcd13);
    Mux(a=muxab13, b=muxcd13, sel=sel[1], out=out[13]);
    Mux(a=a[14], b=b[14], sel=sel[0], out=muxab14);
    Mux(a=c[14], b=d[14], sel=sel[0], out=muxcd14);
    Mux(a=muxab14, b=muxcd14, sel=sel[1], out=out[14]);
    Mux(a=a[15], b=b[15], sel=sel[0], out=muxab15);
    Mux(a=c[15], b=d[15], sel=sel[0], out=muxcd15);
    Mux(a=muxab15, b=muxcd15, sel=sel[1], out=out[15]);
    */

    /*
    Not(in=sel[0], out=notSelBit1);
    Not(in=sel[1], out=notSelBit2);
    And(a=notSelBit1, b=notSelBit2, out=selA);
    And(a=sel[0], b=notSelBit2, out=selB);
    And(a=notSelBit1, b=sel[1], out=selC);
    And(a=sel[0], b=sel[1], out=selD);

    And(a=a[0], b=selA, out=selA1);
    And(a=b[0], b=selB, out=selB1);
    And(a=c[0], b=selC, out=selC1);
    And(a=d[0], b=selD, out=selD1);
    Or(a=selA1, b=selB1, out=ab1);
    Or(a=ab1, b=selC1, out=abc1);
    Or(a=abc1, b=selD1, out=out[0]);

    And(a=a[1], b=selA, out=selA2);
    And(a=b[1], b=selB, out=selB2);
    And(a=c[1], b=selC, out=selC2);
    And(a=d[1], b=selD, out=selD2);
    Or(a=selA2, b=selB2, out=ab2);
    Or(a=ab2, b=selC2, out=abc2);
    Or(a=abc2, b=selD2, out=out[1]);

    And(a=a[2], b=selA, out=selA3);
    And(a=b[2], b=selB, out=selB3);
    And(a=c[2], b=selC, out=selC3);
    And(a=d[2], b=selD, out=selD3);
    Or(a=selA3, b=selB3, out=ab3);
    Or(a=ab3, b=selC3, out=abc3);
    Or(a=abc3, b=selD3, out=out[2]);

    And(a=a[3], b=selA, out=selA4);
    And(a=b[3], b=selB, out=selB4);
    And(a=c[3], b=selC, out=selC4);
    And(a=d[3], b=selD, out=selD4);
    Or(a=selA4, b=selB4, out=ab4);
    Or(a=ab4, b=selC4, out=abc4);
    Or(a=abc4, b=selD4, out=out[3]);

    And(a=a[4], b=selA, out=selA5);
    And(a=b[4], b=selB, out=selB5);
    And(a=c[4], b=selC, out=selC5);
    And(a=d[4], b=selD, out=selD5);
    Or(a=selA5, b=selB5, out=ab5);
    Or(a=ab5, b=selC5, out=abc5);
    Or(a=abc5, b=selD5, out=out[4]);

    And(a=a[5], b=selA, out=selA6);
    And(a=b[5], b=selB, out=selB6);
    And(a=c[5], b=selC, out=selC6);
    And(a=d[5], b=selD, out=selD6);
    Or(a=selA6, b=selB6, out=ab6);
    Or(a=ab6, b=selC6, out=abc6);
    Or(a=abc6, b=selD6, out=out[5]);

    And(a=a[6], b=selA, out=selA7);
    And(a=b[6], b=selB, out=selB7);
    And(a=c[6], b=selC, out=selC7);
    And(a=d[6], b=selD, out=selD7);
    Or(a=selA7, b=selB7, out=ab7);
    Or(a=ab7, b=selC7, out=abc7);
    Or(a=abc7, b=selD7, out=out[6]);

    And(a=a[7], b=selA, out=selA8);
    And(a=b[7], b=selB, out=selB8);
    And(a=c[7], b=selC, out=selC8);
    And(a=d[7], b=selD, out=selD8);
    Or(a=selA8, b=selB8, out=ab8);
    Or(a=ab8, b=selC8, out=abc8);
    Or(a=abc8, b=selD8, out=out[7]);

    And(a=a[8], b=selA, out=selA9);
    And(a=b[8], b=selB, out=selB9);
    And(a=c[8], b=selC, out=selC9);
    And(a=d[8], b=selD, out=selD9);
    Or(a=selA9, b=selB9, out=ab9);
    Or(a=ab9, b=selC9, out=abc9);
    Or(a=abc9, b=selD9, out=out[8]);

    And(a=a[9], b=selA, out=selA10);
    And(a=b[9], b=selB, out=selB10);
    And(a=c[9], b=selC, out=selC10);
    And(a=d[9], b=selD, out=selD10);
    Or(a=selA10, b=selB10, out=ab10);
    Or(a=ab10, b=selC10, out=abc10);
    Or(a=abc10, b=selD10, out=out[9]);

    And(a=a[10], b=selA, out=selA11);
    And(a=b[10], b=selB, out=selB11);
    And(a=c[10], b=selC, out=selC11);
    And(a=d[10], b=selD, out=selD11);
    Or(a=selA11, b=selB11, out=ab11);
    Or(a=ab11, b=selC11, out=abc11);
    Or(a=abc11, b=selD11, out=out[10]);

    And(a=a[11], b=selA, out=selA12);
    And(a=b[11], b=selB, out=selB12);
    And(a=c[11], b=selC, out=selC12);
    And(a=d[11], b=selD, out=selD12);
    Or(a=selA12, b=selB12, out=ab12);
    Or(a=ab12, b=selC12, out=abc12);
    Or(a=abc12, b=selD12, out=out[11]);

    And(a=a[12], b=selA, out=selA13);
    And(a=b[12], b=selB, out=selB13);
    And(a=c[12], b=selC, out=selC13);
    And(a=d[12], b=selD, out=selD13);
    Or(a=selA13, b=selB13, out=ab13);
    Or(a=ab13, b=selC13, out=abc13);
    Or(a=abc13, b=selD13, out=out[12]);

    And(a=a[13], b=selA, out=selA14);
    And(a=b[13], b=selB, out=selB14);
    And(a=c[13], b=selC, out=selC14);
    And(a=d[13], b=selD, out=selD14);
    Or(a=selA14, b=selB14, out=ab14);
    Or(a=ab14, b=selC14, out=abc14);
    Or(a=abc14, b=selD14, out=out[13]);

    And(a=a[14], b=selA, out=selA15);
    And(a=b[14], b=selB, out=selB15);
    And(a=c[14], b=selC, out=selC15);
    And(a=d[14], b=selD, out=selD15);
    Or(a=selA15, b=selB15, out=ab15);
    Or(a=ab15, b=selC15, out=abc15);
    Or(a=abc15, b=selD15, out=out[14]);

    And(a=a[15], b=selA, out=selA16);
    And(a=b[15], b=selB, out=selB16);
    And(a=c[15], b=selC, out=selC16);
    And(a=d[15], b=selD, out=selD16);
    Or(a=selA16, b=selB16, out=ab16);
    Or(a=ab16, b=selC16, out=abc16);
    Or(a=abc16, b=selD16, out=out[15]);
    */
}