// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // ram addr
    Not(in=address[14], out=ramAddr);

    // screen addr
    Not(in=address[13],out=addr13Not);
    And(a=address[14], b=addr13Not, out=screenAddr);

    // keyboard addr
    // And(a=address[14], b=address[13], out=addr0And1);
    // Or8Way(in=address[0..7], out=kbOrAddr0);
    // Or8Way(in=address[5..12], out=kbOrAddr1);
    // Or(a=kbOrAddr0, b=kbOrAddr1, out=kbOrAddr);
    // Not(in=kbOrAddr, out=kbOrAddrNot);
    // And(a=addr0And1, b=kbOrAddrNot, out=kbAddr);
    And(a=address[14], b=address[13], out=kbAddr);

    // 0 0 false
    // 0 1 ram
    // 1 0 screen
    // 1 1 kb
    // which addr
    Or(a=ramAddr, b=kbAddr, out=addrSel0);
    Or(a=screenAddr, b=kbAddr, out=addrSel1);

    // load
    DMux4Way(in=load, sel[0]=addrSel0, sel[1]=addrSel1, a=nonLoad, b=ramLoad, c=screenLoad, d=kbLoad);

    // memory
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    Keyboard(out=kbOut);

    // out
    Mux4Way16(a=false, b=ramOut, c=screenOut, d=kbOut, sel[0]=addrSel0, sel[1]=addrSel1, out=out);
}