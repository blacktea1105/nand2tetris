// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction
    And16(a=instruction, b=instruction, out[15]=opCode,
        out[12]=compBit, out[11]=compBit1, out[10]=compBit2, out[9]=compBit3, out[8]=compBit4, out[7]=compBit5, out[6]=compBit6,
        out[5]=aDestBit, out[4]=dDestBit, out[3]=mDestBit,
        out[2]=jumpBit1, out[1]=jumpBit2, out[0]=jumpBit3,
        // A instruction
        out[0..14]=addressMTmp
        );
    Not(in=opCode, out=isAInstruction);
    Mux16(a[0..15]=false, b[0..14]=addressMTmp, sel=isAInstruction, out=aInstructionAddr);

    // A register
    And(a=opCode, b=aDestBit, out=cInstADest);
    Mux16(a=aInstructionAddr, b=aluOutput, sel=cInstADest, out=aRegisterInput);
    Or(a=aDestBit, b=isAInstruction, out=aRegisterLoad);
    Register(in=aRegisterInput, load=aRegisterLoad, out=aRegisterOut, out[0..14]=addressM);

    // D register
    And(a=opCode, b=dDestBit, out=dRegisterLoad);
    Register(in=aluOutput, load=dRegisterLoad, out=dRegisterOut);

    // A or M ALU input
    Not(in=compBit, out=useA);
    Mux16(a=inM, b=aRegisterOut, sel=useA, out=amAluInput);

    // ALU
    ALU(x=dRegisterOut, y=amAluInput,
        zx=compBit1, nx=compBit2, zy=compBit3, ny=compBit4, f=compBit5, no=compBit6,
        out=aluOutput, out=outM,
        zr=aluZr, ng=aluNg);
    Not(in=aluZr, out=notAluZr);
    Not(in=aluNg, out=notAluNg);
    And(a=notAluZr, b=notAluNg, out=aluOutGT);
    Or(a=aluZr, b=notAluNg, out=aluOutGE);
    And(a=notAluZr, b=aluNg, out=aluOutLT);
    Or(a=aluZr, b=aluNg, out=aluOutLE);

    // PC / instruction
    DMux8Way(in=true, sel[0]=jumpBit3, sel[1]=jumpBit2, sel[2]=jumpBit1,
        a=jumpNull, b=jumpGT, c=jumpEQ, d=jumpGE, e=jumpLT, f=jumpNE, g=jumpLE, h=jumpMP);
    Mux(a=false, b=aluOutGT, sel=jumpGT, out=jumpTmpGT);
    Mux(a=jumpTmpGT, b=aluZr, sel=jumpEQ, out=jumpTmpEQ);
    Mux(a=jumpTmpEQ, b=aluOutGE, sel=jumpGE, out=jumpTmpGE);
    Mux(a=jumpTmpGE, b=aluOutLT, sel=jumpLT, out=jumpTmpLT);
    Mux(a=jumpTmpLT, b=notAluZr, sel=jumpNE, out=jumpTmpNE);
    Mux(a=jumpTmpNE, b=aluOutLE, sel=jumpLE, out=jumpTmpLE);
    Mux(a=jumpTmpLE, b=true, sel=jumpMP, out=jumpTmpMP);
    Mux(a=false, b=jumpTmpMP, sel=opCode, out=jumpBit);
    PC(in=aRegisterOut, load=jumpBit, inc=true, reset=reset, out[0..14]=pc);

    // write M
    And(a=mDestBit, b=opCode, out=writeM);
}