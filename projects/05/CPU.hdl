// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // D register
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    Register(in=aluOut, load=dRegLoad, out=dRegOut);

    // A register load
    And(a=instruction[15], b=instruction[5], out=cInstAReg);
    Not(in=instruction[15], out=aInst);
    Or(a=aInst, b=cInstAReg, out=aRegLoad);

    // A Register
    Mux16(
        a[15]=false, a[0..14]=instruction[0..14],
        b=aluOut,
        sel=cInstAReg,
        out=aRegIn
    );
    Register(in=aRegIn, load=aRegLoad,
        out=aRegOut,
        out[0..14]=addressM
    );

    // jump
    DMux8Way(in=true,
        // sel[0]=instruction[2],
        // sel[1]=instruction[1],
        // sel[2]=instruction[0],
        sel[0..2]=instruction[0..2],
        a=jmpNullBit, b=jmpJGTBit, c=jmpJEQBit, d=jmpJGEBit,
        e=jmpJLTBit, f=jmpNEBit, g=jmpLEBit, h=jmpJMP
    );
    Or(a=aluNg, b=aluZr, out=aluNgOrZr);
    Not(in=aluNgOrZr, out=aluPg);
    Or(a=aluZr, b=aluPg, out=aluZrOrPg);
    Not(in=aluZr, out=aluZrNot);

    And(a=jmpJGTBit, b=aluPg, out=jmpJGT);
    And(a=jmpJEQBit, b=aluZr, out=jmpJEQ);
    And(a=jmpJGEBit, b=aluZrOrPg, out=jmpJGE);
    And(a=jmpJLTBit, b=aluNg, out=jmpJLT);
    And(a=jmpNEBit, b=aluZrNot, out=jmpNE);
    And(a=jmpLEBit, b=aluNgOrZr, out=gjmpLE);

    Or8Way(
        in[0]=false, in[1]=jmpJGT, in[2]=jmpJEQ, in[3]=jmpJGE,
        in[4]=jmpJLT, in[5]=jmpNE, in[6]=gjmpLE, in[7]=jmpJMP,
        out=canJmp
    );
    And(a=instruction[15], b=canJmp, out=pcLoad);

    // PC
    PC(in=aRegOut ,load=pcLoad ,inc=true ,reset=reset ,out[0..14]=pc);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ALU in D or M register
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluInDOrAReg);

    // ALU
    ALU(x=dRegOut, y=aluInDOrAReg,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, out=outM,
        zr=aluZr, ng=aluNg
    );
}